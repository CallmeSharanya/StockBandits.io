import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
 const [selectedStocks, setSelectedStocks] = useState([]);
 const [stockData, setStockData] = useState({});
 const [algorithm, setAlgorithm] = useState('');
 const [epsilon, setEpsilon] = useState(0.1);
 const [logs, setLogs] = useState([]);
 const [showLogs, setShowLogs] = useState(false);
 const [showChart, setShowChart] = useState(false);
 const [historicalData, setHistoricalData] = useState({});

 const stocks = [
 { symbol: 'AAPL', name: 'Apple', sector: 'Technology' },
 { symbol: 'MSFT', name: 'Microsoft', sector: 'Technology' },
 { symbol: 'GOOGL', name: 'Alphabet', sector: 'Technology' },
 { symbol: 'AMZN', name: 'Amazon', sector: 'Consumer Discretionary' },
 { symbol: 'TSLA', name: 'Tesla', sector: 'Automotive' },
 ];

 const algorithms = [
 { value: 'epsilon', label: 'Epsilon-Greedy', description: 'Balances exploration and exploitation' },
 { value: 'ucb', label: 'Upper Confidence Bound', description: 'Optimizes for uncertainty' },
 { value: 'thompson', label: 'Thompson Sampling', description: 'Uses Bayesian inference' },
 ];

 const handleStockSelect = (stock) => {
 if (selectedStocks.includes(stock)) {
 setSelectedStocks(selectedStocks.filter((s) => s !== stock));
 } else if (selectedStocks.length <10) {
 setSelectedStocks([...selectedStocks, stock]);
 }
 };

 const handleAlgorithmChange = (e) => {
 setAlgorithm(e.target.value);
 };

 const handleEpsilonChange = (e) => {
 setEpsilon(parseFloat(e.target.value));
 };

 const runSimulation = async () => {
 // Simulate MAB algorithm
 const newLogs = [];
 for (let i =0; i <100; i++) {
 const selectedStock = selectedStocks[Math.floor(Math.random() * selectedStocks.length)];
 const reward = Math.random() *100;
 newLogs.push({ stock: selectedStock, reward });
 await new Promise((resolve) => setTimeout(resolve,100));
 }
 setLogs(newLogs);
 };

 return (
 <div className="app-container glass">
 <header className="app-header">
 <h1>Multi-Armed Bandit Stock Selector</h1>
 </header>

 <div className="main-content">
 <div className="card stock-selection">
 <h2>Select Stocks (max10)</h2>
 <div className="stock-grid">
 {stocks.map((stock) => (
 <button
 key={stock.symbol}
 className={`stock-button ${selectedStocks.includes(stock.symbol) ? 'selected' : ''}`}
 onClick={() => handleStockSelect(stock.symbol)}
 >
 <span className="stock-name">{stock.name}</span>
 <span className="stock-symbol">{stock.symbol}</span>
 <span className="stock-sector">{stock.sector}</span>
 </button>
 ))}
 </div>
 </div>

 <div className="card algorithm-selection">
 <h2>Select Algorithm</h2>
 <div className="algorithm-grid">
 {algorithms.map((algo) => (
 <div key={algo.value} className="algorithm-card">
 <h3>{algo.label}</h3>
 <p>{algo.description}</p>
 <input
 type="radio"
 name="algorithm"
 value={algo.value}
 checked={algorithm === algo.value}
 onChange={handleAlgorithmChange}
 />
 </div>
 ))}
 </div>

 {algorithm === 'epsilon' && (
 <div className="epsilon-slider">
 <label>Epsilon: {epsilon.toFixed(2)}</label>
 <input
 type="range"
 min="0"
 max="1"
 step="0.01"
 value={epsilon}
 onChange={handleEpsilonChange}
 />
 </div>
 )}
 </div>

 <div className="action-buttons">
 <button className="btn primary" onClick={runSimulation} disabled={selectedStocks.length ===0 || !algorithm}>
 Run Simulation
 </button>
 <button className="btn secondary" onClick={() => setShowLogs(!showLogs)}>Toggle Logs</button>
 <button className="btn secondary" onClick={() => setShowChart(!showChart)}>Toggle Chart</button>
 </div>

 {showLogs && (
 <div className="card logs-container">
 <h2>Simulation Logs</h2>
 <ul>
 {logs.map((log, index) => (
 <li key={index}>
 Selected {log.stock}, Reward: {log.reward.toFixed(2)}
 </li>
 ))}
 </ul>
 </div>
 )}

 {showChart && (
 <div className="card chart-container">
 <h2>Historical Data</h2>
 {/* Chart component will go here */}
 </div>
 )}
 </div>
 </div>
 );
}

export default App;
